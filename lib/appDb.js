var pg = require('pg');var appDb = exports;appDb.query = function (sql, params, handleResults) {	console.log(sql);	console.log(params);	pg.connect(process.env.DATABASE_URL, function(err, client) {		if (err) {			console.log('error connecting to pg');			console.log(err);			handleResults(err);			//pg.end();		} else {			//if (params.length) {				client.query(sql, params, function(err, result) {					if (err) {						console.log('error running query');						console.log(err);						handleResults(err);						//pg.end();					} else {						console.log(result.rows);						handleResults(err, result.rows);						//pg.end();					}				});			/*} else {				client.query(sql, function(err, result) {					if (err) {						console.log('error running query');						console.log(err);						handleResults(err);						//pg.end();					} else {						handleResults(err, result);						//pg.end();					}				});			}			*/		}	});	}appDb.lesson = {		translateResults: function (results) {		var lessons = [];		var resultLength = results.length;		for (var i = 0; i < resultLength; i++) {						/*			console.log("");			console.log("translating results[i].screens...");			console.log(results[i].screens);			console.log("")			*/						var lesson = {				lessonId 			: results[i].lesson_id,				lessonTitle 		: results[i].title,				lessonDescription 	: results[i].description,				lessonScreens 		: JSON.parse(results[i].screens || "[]"),				lessonListId		: results[i].lessonlist_id,				lessonSeq			: results[i].seq			};			lessons.push(lesson);		}		return lessons	}};