{
  "lessonId": "subqueries-in-the-where",
  "lessonTitle": " Subqueries in the WHERE?",
  "lessonDescription": "By using subqueries in the WHERE clause, you can filter data based on the ouput of another query!",
  "lessonScreens": [
    {
      "screenMd": "In this lesson, we're going to show you how to filter down a query using the results of another query. A query used inside another query is called a subquery, and there's no practical limit to how far you can go with this. ",
      "screenText": "<p>In this lesson, we&#39;re going to show you how to filter down a query using the results of another query. A query used inside another query is called a subquery, and there&#39;s no practical limit to how far you can go with this. </p>\n",
      "keepSql": "true",
      "sqlTarget": "",
      "startingSql": "",
      "screenNumber": "0"
    },
    {
      "screenMd": "Let's say we want to get a list of unique customer names that have placed an order over $20. \n\nOrder amount and customer names aren't in the same table, so we either need to join the ```customer``` table to ```pizza_order```, or we have to use a subquery. \n\nAnd since we only want to display customer records, we're going to use a subquery. Give this query a run:\n\n```\nSELECT first_name, last_name\nFROM customer\nWHERE customer_id IN (\n\tSELECT customer_id \n\tFROM pizza_order\n\tWHERE total_amount > 20\n)\n```",
      "screenText": "<p>Let&#39;s say we want to get a list of unique customer names that have placed an order over $20. </p>\n<p>Order amount and customer names aren&#39;t in the same table, so we either need to join the <code>customer</code> table to <code>pizza_order</code>, or we have to use a subquery. </p>\n<p>And since we only want to display customer records, we&#39;re going to use a subquery. Give this query a run:</p>\n<pre><code>SELECT first_name, last_name\nFROM customer\nWHERE customer_id IN (\n    SELECT customer_id \n    FROM pizza_order\n    WHERE total_amount &gt; 20\n)</code></pre>\n",
      "keepSql": "true",
      "sqlTarget": "SELECT first_name, last_name\nFROM customer\nWHERE customer_id IN (\n\tSELECT customer_id \n\tFROM pizza_order\n\tWHERE total_amount > 20\n)",
      "startingSql": "",
      "screenNumber": "1"
    },
    {
      "screenMd": "Returned are a list of names, of customers that placed orders over $20. How do we know these are the results we want?\n\nLet's step through what this query is actually doing. \n\nThe main query is essentially, \"list customer names for customers in a list of customer ids of orders over $20.\"\n\n```\nSELECT first_name, last_name\nFROM customer\nWHERE customer_id IN (\n\t-- list of customer_ids \n\t-- on orders over $20\n)\n```\n\n.. Except that list of customer_ids is generated by another ```SELECT``` query!\n\n",
      "screenText": "<p>Returned are a list of names, of customers that placed orders over $20. How do we know these are the results we want?</p>\n<p>Let&#39;s step through what this query is actually doing. </p>\n<p>The main query is essentially, &quot;list customer names for customers in a list of customer ids of orders over $20.&quot;</p>\n<pre><code>SELECT first_name, last_name\nFROM customer\nWHERE customer_id IN (\n    -- list of customer_ids \n    -- on orders over $20\n)</code></pre>\n<p>.. Except that list of customer_ids is generated by another <code>SELECT</code> query!</p>\n",
      "keepSql": "true",
      "sqlTarget": "",
      "startingSql": "",
      "screenNumber": "2"
    },
    {
      "screenMd": "We can check the results of the subquery by running it on its own. Let's add ```total_amount``` to the output as well, and sort by ```customer_id```.\n\n```\nSELECT customer_id, total_amount\nFROM pizza_order\nWHERE total_amount > 20\nORDER BY customer_id\n```",
      "screenText": "<p>We can check the results of the subquery by running it on its own. Let&#39;s add <code>total_amount</code> to the output as well, and sort by <code>customer_id</code>.</p>\n<pre><code>SELECT customer_id, total_amount\nFROM pizza_order\nWHERE total_amount &gt; 20\nORDER BY customer_id</code></pre>\n",
      "keepSql": "true",
      "sqlTarget": "SELECT customer_id, total_amount\nFROM pizza_order\nWHERE total_amount > 20\nORDER BY customer_id",
      "startingSql": "",
      "screenNumber": "3"
    },
    {
      "screenMd": "As we can see, 3 different customer ids are returned in the list. ",
      "screenText": "<p>As we can see, 3 different customer ids are returned in the list. </p>\n",
      "keepSql": "true",
      "sqlTarget": "",
      "startingSql": "",
      "screenNumber": "4"
    },
    {
      "screenMd": "When using subqueries in the ```WHERE``` clause, there are a few things to keep in mind:\n\n#### **The subquery results must be a single column**\n\nFor example, this subquery wouldn't work:\n\n```\nWHERE customer_id IN (\n\tSELECT customer_id, total_amount\n\tFROM pizza_order\n)\n```",
      "screenText": "<p>When using subqueries in the <code>WHERE</code> clause, there are a few things to keep in mind:</p>\n<h4><strong>The subquery results must be a single column</strong></h4>\n<p>For example, this subquery wouldn&#39;t work:</p>\n<pre><code>WHERE customer_id IN (\n    SELECT customer_id, total_amount\n    FROM pizza_order\n)</code></pre>\n",
      "keepSql": "true",
      "sqlTarget": "",
      "startingSql": "",
      "screenNumber": "5"
    },
    {
      "screenMd": "When using subqueries in the ```WHERE``` clause, there are a few things to keep in mind:\n  \n#### **The column returned does not need to be named the same as the column its being operated against, but it should be the same datatype**\n\nThis query would technically work, but it doesn't make much sense and the results wouldn't be valuable.\n```\nWHERE customer_id IN (\n\tSELECT order_id\n\tFROM pizza_order\n)\n```\n",
      "screenText": "<p>When using subqueries in the <code>WHERE</code> clause, there are a few things to keep in mind:</p>\n<h4><strong>The column returned does not need to be named the same as the column its being operated against, but it should be the same datatype</strong></h4>\n<p>This query would technically work, but it doesn&#39;t make much sense and the results wouldn&#39;t be valuable.</p>\n<pre><code>WHERE customer_id IN (\n    SELECT order_id\n    FROM pizza_order\n)</code></pre>\n",
      "keepSql": "true",
      "sqlTarget": "",
      "startingSql": "",
      "screenNumber": "6"
    },
    {
      "screenMd": "When using subqueries in the ```WHERE``` clause, there are a few things to keep in mind:\n  \n#### **The subquery results can include duplicate values  without affecting the main query when used with the ```IN``` operator**\n\nNote the query results from us running the subquery separately. Notice how certain some ```customer_id``` values show up more than once? It's effectively the same as doing:\n\n```\nWHERE customer_id IN (\n\t10001, 10002, 10002, 10002, -- etc\n)\n```\n",
      "screenText": "<p>When using subqueries in the <code>WHERE</code> clause, there are a few things to keep in mind:</p>\n<h4><strong>The subquery results can include duplicate values  without affecting the main query when used with the <code>IN</code> operator</strong></h4>\n<p>Note the query results from us running the subquery separately. Notice how certain some <code>customer_id</code> values show up more than once? It&#39;s effectively the same as doing:</p>\n<pre><code>WHERE customer_id IN (\n    10001, 10002, 10002, 10002, -- etc\n)</code></pre>\n",
      "keepSql": "true",
      "sqlTarget": "",
      "startingSql": "",
      "screenNumber": "7"
    },
    {
      "screenMd": "Let's expand on our initial query and try something a bit more advanced. \n\nWhat if we want a list of customers who placed pizza orders over $20, of which included Classic Pepperoni pizza? \n\nLet's get our original query back in our editor: \n\n```\nSELECT first_name, last_name\nFROM customer\nWHERE customer_id IN (\n\tSELECT customer_id \n\tFROM pizza_order\n\tWHERE total_amount > 20\n)\n```",
      "screenText": "<p>Let&#39;s expand on our initial query and try something a bit more advanced. </p>\n<p>What if we want a list of customers who placed pizza orders over $20, of which included Classic Pepperoni pizza? </p>\n<p>Let&#39;s get our original query back in our editor: </p>\n<pre><code>SELECT first_name, last_name\nFROM customer\nWHERE customer_id IN (\n    SELECT customer_id \n    FROM pizza_order\n    WHERE total_amount &gt; 20\n)</code></pre>\n",
      "keepSql": "true",
      "sqlTarget": "SELECT first_name, last_name\nFROM customer\nWHERE customer_id IN (\n\tSELECT customer_id \n\tFROM pizza_order\n\tWHERE total_amount > 20\n)",
      "startingSql": "",
      "screenNumber": "8"
    },
    {
      "screenMd": "To get our qualifying pizza orders, we're going to add a subquery to it's ```WHERE``` clause!\n\nFor convenience, we'll let you know that the Classic Pepperoni is ```pizza_id``` 101.\n\n```\n...\nWHERE customer_id IN (\n\tSELECT customer_id \n\tFROM pizza_order\n\tWHERE total_amount > 20\n\tAND order_id IN (\n\t\tSELECT order_id\n\t\tFROM pizza_order_line\n\t\tWHERE pizza_id = 102\n\t)\n)\n```",
      "screenText": "<p>To get our qualifying pizza orders, we&#39;re going to add a subquery to it&#39;s <code>WHERE</code> clause!</p>\n<p>For convenience, we&#39;ll let you know that the Classic Pepperoni is <code>pizza_id</code> 101.</p>\n<pre><code>...\nWHERE customer_id IN (\n    SELECT customer_id \n    FROM pizza_order\n    WHERE total_amount &gt; 20\n    AND order_id IN (\n        SELECT order_id\n        FROM pizza_order_line\n        WHERE pizza_id = 102\n    )\n)</code></pre>\n",
      "keepSql": "true",
      "sqlTarget": "SELECT first_name, last_name\nFROM customer\nWHERE customer_id IN (\n\tSELECT customer_id \n\tFROM pizza_order\n\tWHERE total_amount > 20\n\tAND order_id IN (\n\t\tSELECT order_id\n\t\tFROM pizza_order_line\n\t\tWHERE pizza_id = 102\n\t)\n)",
      "startingSql": "",
      "screenNumber": "9"
    },
    {
      "screenMd": "Great! \n\nIf you haven't noticed yet, we've broken our usual query formatting pattern for this exercise, to try and help show the different levels of subqueries (one tab indentation each level in).\n\nWe've also broken our \"try to remain consistent\" recommendation too.\n\nWhen you start nesting queries inside queries, it is often hard to keep it pretty and easy to read. \n\nWelcome to the world of SQL.",
      "screenText": "<p>Great! </p>\n<p>If you haven&#39;t noticed yet, we&#39;ve broken our usual query formatting pattern for this exercise, to try and help show the different levels of subqueries (one tab indentation each level in).</p>\n<p>We&#39;ve also broken our &quot;try to remain consistent&quot; recommendation too.</p>\n<p>When you start nesting queries inside queries, it is often hard to keep it pretty and easy to read. </p>\n<p>Welcome to the world of SQL.</p>\n",
      "keepSql": "true",
      "sqlTarget": "",
      "startingSql": "",
      "screenNumber": "10"
    }
  ]
}